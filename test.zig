const std = @import("std");
const rsa = @import("rsa.zig");
pub fn main() !void {
    std.debug.print("GENERATING KEYS.....\n", .{});
    var t1 = std.time.milliTimestamp();
    const alice_keys = rsa.gen_keys();
    var t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("ALICE'S KEYS:\nPublic Key: {any}\nPrivate Key: {any}\n", .{ alice_keys.public_key, alice_keys.private_key });
    std.debug.print("GENERATING KEYS.....\n", .{});
    t1 = std.time.milliTimestamp();
    const bob_keys = rsa.gen_keys();
    t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("BOB'S KEYS:\nPublic Key: {any}\nPrivate Key: {any}\n", .{ bob_keys.public_key, bob_keys.private_key });
    t1 = std.time.milliTimestamp();
    const alice_signature = rsa.sign("SIGNED DATA", alice_keys.private_key, alice_keys.public_key);
    t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("ALICE'S SIGNATURE FOR \"SIGNED DATA\": {any}\n", .{alice_signature});
    t1 = std.time.milliTimestamp();
    const bob_verify = rsa.verify(alice_signature, "SIGNED DATA", alice_keys.public_key);
    t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("BOB VERIFY SIGNATURE: {any}\n", .{bob_verify});
    t1 = std.time.milliTimestamp();
    const alice_to_bob_encrypted = rsa.encrypt("HELLO BOB", bob_keys.public_key);
    t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("ALICE SENDS ENCRYPTED MESSAGE \"HELLO BOB\" TO BOB: {any}\n", .{alice_to_bob_encrypted});
    t1 = std.time.milliTimestamp();
    const alice_to_bob_decrypted = rsa.decrypt(try alice_to_bob_encrypted, bob_keys.public_key, bob_keys.private_key);
    t2 = std.time.milliTimestamp();
    std.debug.print("TIME: {any}\n", .{t2 - t1});
    std.debug.print("BOB DECRYPT MESSAGE: {any}\n", .{alice_to_bob_decrypted});
}
